import os
import pathlib
from datetime import datetime

from markupsafe import Markup

from static.data_dict.helper_functions import Helpers
from static.data_dict.resource_collector import ResourceCollector

helper = Helpers('python', pathlib.Path(__file__))
iterrator = iter(helper)
cheatsheet_name = 'python'
information = {
	'tool': 'Python',
	'title': 'Python Cheatsheet',
	'subtitle': 'This site is a reference for Python',
	'description': 'Python started as a hobby project by Guido Van Rossum and was first released in 1991, as a successor to the ABC programming language. Python\'s design philosophy emphasizes code readability with its notable use of significant whitespace. It aims to help programmers write clear, logical code for small and large-scale projects. Popular frameworks include Django, Flask, Numpy, Scipy',
	'last_modified': (datetime.utcfromtimestamp(os.path.getmtime(__file__)).strftime('%d %B, %Y at %H:%M:%S')),
	'state': '‚ùå',
	'characteristics': [
		ResourceCollector.recieve_characteristics_from_dicts(
			'Python',
			[
				helper.characteristics.get('general-purpose'),
				helper.characteristics.get('object-oriented-programming'),
				helper.characteristics.get('web-development'),
				helper.characteristics.get('scripting-language'),
				helper.characteristics.get('compiled-language'),
			])
	],
	'topic_uris': [
		'general-purpose',
		'object-oriented-programming',
		'web-development',
		'scripting-language',
		'compiled-language',
	],
}
general_info_text = ''
general_info_text_lead = ''
general_info_links = {}
general_info = [
	'',
]
general_info_flag = False
see_also = [
	{
	},
]

code_cards = [{

}]
# TODO: Make regex for links (find links at: https://overapi.com/jquery)
cheatsheet = [
	{
		'heading': helper.set_folder('String Methods'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Example',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('capitalize()')[0]),
					'description': Markup('Return a copy of the string with its first character capitalized and the rest lowercased'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.capitalize',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('center(width[, fillchar])')[0]),
					'description': Markup('Return centered in a string of length width. Padding is done using the specified fillchar (default is a space)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.center',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('count(sub[, start[, end]])')[0]),
					'description': Markup('Return the number of non-overlapping occurrences of substring sub in the range [start, end]'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.count',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('decode')[0]),
					'description': Markup('Decodes the string using the codec registered for encoding'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.decode',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('encode([encoding[, errors]])')[0]),
					'description': Markup('Return an encoded version of the string.  Default encoding is the current default string encoding'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.encode',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('endswith(suffix[, start[, end]])')[0]),
					'description': Markup('Return True if the string ends with the specified suffix, otherwise return False'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.endswith',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('expandtabs([tabsize])')[0]),
					'description': Markup('Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.expandtabs',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('find(sub[, start[, end]])')[0]),
					'description': Markup('Return the lowest index in the string where substring sub is found, such that sub is contained in the slice s[start:end]'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.find',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('format(*args, **kwargs)')[0]),
					'description': Markup('Perform a string formatting operation'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.format',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('index(sub[, start[, end]])')[0]),
					'description': Markup('Like find(), but raise ValueError when the substring is not found'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.index',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isalnum()')[0]),
					'description': Markup('Return true if all characters in the string are alphanumeric and there is at least one character, false otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.isalnum',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isalpha()')[0]),
					'description': Markup('Return true if all characters in the string are alphabetic and there is at least one character, false otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.isalpha',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isdigit()')[0]),
					'description': Markup('Return true if all characters in the string are digits and there is at least one character, false otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.isdigit',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('islower()')[0]),
					'description': Markup('Return true if all cased characters in the string are lowercase and there is at least one cased character, false otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.islower',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isspace()')[0]),
					'description': Markup('Return true if there are only whitespace characters in the string and there is at least one character, false otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.isspace',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('istitle()')[0]),
					'description': Markup('Return true if the string is a titlecased string and there is at least one character, for example uppercase characters may only follow uncased characters and lowercase characters only cased ones'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.istitle',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isupper()')[0]),
					'description': Markup('Return true if all cased characters in the string are uppercase and there is at least one cased character, false otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.isupper',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('join(iterable)')[0]),
					'description': Markup('Return a string which is the concatenation of the strings in the iterable iterable'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.join',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ljust(width[, fillchar])')[0]),
					'description': Markup('Return the string left justified in a string of length width'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.ljust',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('lower()')[0]),
					'description': Markup('Return a copy of the string converted to lowercase'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.lower',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('lstrip([chars])')[0]),
					'description': Markup('Return a copy of the string with leading characters removed'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.lstrip',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('partition(sep)')[0]),
					'description': Markup('Split the string at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.partition',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('replace(old, new[, count])')[0]),
					'description': Markup('Return a copy of the string with all occurrences of substring old replaced by new'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.replace',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('rfind(sub[, start[, end]])')[0]),
					'description': Markup('Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end]'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.rfind',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('rindex(sub[, start[, end]])')[0]),
					'description': Markup('Like rfind() but raises ValueError when the substring sub is not found'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.rindex',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('rjust(width[, fillchar])')[0]),
					'description': Markup('Return the string right justified in a string of length width'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.rjust',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('rpartition(sep)')[0]),
					'description': Markup('Split the string at the last occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.rpartition',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('rsplit([sep[, maxsplit]])')[0]),
					'description': Markup('Return a list of the words in the string, using sep as the delimiter string'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.rsplit',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('rstrip([chars])')[0]),
					'description': Markup('Return a copy of the string with trailing characters removed'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.rstrip',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('split([sep[, maxsplit]])')[0]),
					'description': Markup('Return a list of the words in the string, using sep as the delimiter string'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.split',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('splitlines([keepends])')[0]),
					'description': Markup('Return a list of the lines in the string, breaking at line boundaries'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.splitlines',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('startswith(prefix[, start[, end]])')[0]),
					'description': Markup('Return True if string starts with the prefix, otherwise return False'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.startswith',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('strip([chars])')[0]),
					'description': Markup('Return a copy of the string with the leading and trailing characters removed'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.strip',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('swapcase')[0]),
					'description': Markup('Return a copy of the string with uppercase characters converted to lowercase and vice versa'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.swapcase',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('title()')[0]),
					'description': Markup('Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.title',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('translate(table[, deletechars])')[0]),
					'description': Markup('Return a copy of the string where all characters occurring in the optional argument deletechars are removed, and the remaining characters have been mapped through the given translation table, which must be a string of length 256'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.translate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('upper()')[0]),
					'description': Markup('Return a copy of the string converted to uppercase'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.upper',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zfill(width)')[0]),
					'description': Markup('Return the numeric string left filled with zeros in a string of length width'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#str.zfill',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isnumeric()')[0]),
					'description': Markup('Return True if there are only numeric characters in S, False otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#unicode.isnumeric',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isdecimal()')[0]),
					'description': Markup('Return True if there are only decimal characters in S, False otherwise'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#unicode.isdecimal',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},

	{
		'heading': helper.set_folder('Random'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [

				{
					'flag': Markup(helper.set_entry_folder('seed([x])')[0]),
					'description': Markup('Initialize the basic random number generator'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.seed',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('getstate()')[0]),
					'description': Markup('Return an object capturing the current internal state of the generator'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.getstate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('setstate(state)')[0]),
					'description': Markup('State should have been obtained from a previous call to getstate(), and setstate() restores the internal state of the generator to what it was at the time setstate() was called'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.setstate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('jumpahead(n)')[0]),
					'description': Markup('Change the internal state to one different from and likely far away from the current state'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.jumpahead',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('getrandbits(k)')[0]),
					'description': Markup('Returns a python long int with k random bits'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.getrandbits',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('randrange([start], stop[, step])')[0]),
					'description': Markup('Return a randomly selected element from range(start, stop, step)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.randrange',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('randint(a,b)')[0]),
					'description': Markup('Return a random integer N such that a <= N <= b'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.randint',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('choice(seq)')[0]),
					'description': Markup('Return a random element from the non-empty sequence seq'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.choice',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('shuffle(x[,random])')[0]),
					'description': Markup('Shuffle the sequence x in place'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.shuffle',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('sample(population,k)')[0]),
					'description': Markup('Return a k length list of unique elements chosen from the population sequence'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.sample',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('random()')[0]),
					'description': Markup('Return the next random floating point number in the range [0.0, 1.0)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.random',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('uniform(a,b)')[0]),
					'description': Markup('Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.uniform',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('triangular(low,high,mode)')[0]),
					'description': Markup('Return a random floating point number N such that low <= N <= high and with the specified mode between those bounds'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.triangular',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('betavariate(alpha,beta)')[0]),
					'description': Markup('Beta distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.betavariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('expovariate(lambd)')[0]),
					'description': Markup('Exponential distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.expovariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gammavariate(alpha,beta)')[0]),
					'description': Markup('Gamma distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.gammavariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gauss(mu,sigma)')[0]),
					'description': Markup('Gaussian distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.gauss',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('lognormvariate(mu,sigma)')[0]),
					'description': Markup('Log normal distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.lognormvariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('normalvariate(mu,sigma)')[0]),
					'description': Markup('Normal distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.normalvariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('vonmisesvariate(mu,kappa)')[0]),
					'description': Markup('Mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.vonmisesvariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('paretovariate(alpha)')[0]),
					'description': Markup('Pareto distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.paretovariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('weibullvariate(alpha,beta)')[0]),
					'description': Markup('Weibull distribution'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/random.html#random.weibullvariate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('Numbers'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('ceil(x)')[0]),
					'description': Markup('Return the ceiling of x as a float, the smallest integer value greater than or equal to x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.ceil',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('copysign(x,y)')[0]),
					'description': Markup('Return x with the sign of y'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.copysign',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fabs(x)')[0]),
					'description': Markup('Return the absolute value of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.fabs',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('factorial(x)')[0]),
					'description': Markup('Return x factorial'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.factorial',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('floor(x)')[0]),
					'description': Markup('Return the floor of x as a float, the largest integer value less than or equal to x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.floor',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fmod(x,y)')[0]),
					'description': Markup('Return fmod(x, y), as defined by the platform C library'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.fmod',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('frexp(x)')[0]),
					'description': Markup('Return the mantissa and exponent of x as the pair (m, e)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.frexp',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fsum(iterable)')[0]),
					'description': Markup('Return an accurate floating point sum of values in the iterable'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.fsum',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isinf(x)')[0]),
					'description': Markup('Check if the float x is positive or negative infinity'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.isinf',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isnan(x)')[0]),
					'description': Markup('Check if the float x is a NaN (not a number)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.isnan',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ldexp(x,i)')[0]),
					'description': Markup('Return x * (2**i)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.ldexp',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('modf()')[0]),
					'description': Markup('Return the fractional and integer parts of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.modf',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('trunc()')[0]),
					'description': Markup('Return the Real value x truncated to an Integral (usually a long integer)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.trunc',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('Powers and Logarithms'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('exp(x)')[0]),
					'description': Markup('Return e**x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.exp',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('log(x[,base])')[0]),
					'description': Markup('With one argument, return the natural logarithm of x (to base e)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.log',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('log1p(x)')[0]),
					'description': Markup('Return the natural logarithm of 1+x (base e)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.log1p',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('log10(x)')[0]),
					'description': Markup('Return the base-10 logarithm of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.log10',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('pow(x,y)')[0]),
					'description': Markup('Return x raised to the power y'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.pow',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('sqrt(x)')[0]),
					'description': Markup('Return the square root of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.sqrt',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('Trigonometry'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('acos(x)')[0]),
					'description': Markup('Return the arc cosine of x, in radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.acos',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('asin(x)')[0]),
					'description': Markup('Return the arc sine of x, in radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.asin',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('atan(x)')[0]),
					'description': Markup('Return the arc tangent of x, in radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.atan',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('atan2(y,x)')[0]),
					'description': Markup('Return atan(y / x), in radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.atan2',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('cos(x)')[0]),
					'description': Markup('Return the cosine of x radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.cos',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('hypot(x,y)')[0]),
					'description': Markup('Return the Euclidean norm, sqrt(x*x + y*y)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.hypot',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('sin(x)')[0]),
					'description': Markup('Return the sine of x radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.sin',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tan(x)')[0]),
					'description': Markup('Return the tangent of x radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.tan',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('degrees(x)')[0]),
					'description': Markup('Converts angle x from radians to degrees'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.degrees',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('radians(x)')[0]),
					'description': Markup('Converts angle x from degrees to radians'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.radians',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('acosh(x)')[0]),
					'description': Markup('Return the inverse hyperbolic cosine of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.acosh',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('asinh(x)')[0]),
					'description': Markup('Return the inverse hyperbolic sine of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.asinh',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('atanh(x)')[0]),
					'description': Markup('Return the inverse hyperbolic tangent of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.atanh',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('cosh(x)')[0]),
					'description': Markup('Return the hyperbolic cosine of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.cosh',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('sinh(x)')[0]),
					'description': Markup('Return the hyperbolic sine of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.sinh',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tanh(x)')[0]),
					'description': Markup('Return the hyperbolic tangent of x'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/math.html#math.tanh',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('File Methods'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('close()')[0]),
					'description': Markup('Close the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.close',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('flush()')[0]),
					'description': Markup('Flush the internal buffer, like stdio‚Äòs fflush()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.flush',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fileno()')[0]),
					'description': Markup('Return the integer ‚Äúfile descriptor‚Äù that is used by the underlying implementation to request I/O operations from the operating system'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.fileno',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('isatty()')[0]),
					'description': Markup('Return True if the file is connected to a tty(-like) device, else False'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.isatty',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('next()')[0]),
					'description': Markup('A file object is its own iterator, for example iter(f) returns f (unless f is closed)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.next',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('read([size])')[0]),
					'description': Markup('Read at most size bytes from the file (less if the read hits EOF before obtaining size bytes)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.read',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('readline([size])')[0]),
					'description': Markup('Read one entire line from the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.readline',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('readlines([sizehint])')[0]),
					'description': Markup('Read until EOF using readline() and return a list containing the lines thus read'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.readlines',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('xreadlines()')[0]),
					'description': Markup('This method returns the same thing as iter(f)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.xreadlines',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('seek(offset[, whence])')[0]),
					'description': Markup('Set the file‚Äôs current position, like stdio‚Äòs fseek()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.seek',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tell()')[0]),
					'description': Markup('Return the file‚Äôs current position, like stdio‚Äòs ftell()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.tell',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('truncate([size])')[0]),
					'description': Markup('Truncate the file‚Äôs size'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.truncate',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('write(str)')[0]),
					'description': Markup('Write a string to the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.write',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('writelines(sequence)')[0]),
					'description': Markup('Write a sequence of strings to the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.writelines',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('File Attributes'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('closed')[0]),
					'description': Markup('Bool indicating the current state of the file object'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.closed',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('encoding')[0]),
					'description': Markup('The encoding that this file uses'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.encoding',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('errors')[0]),
					'description': Markup('The Unicode error handler used along with the encoding'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.errors',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('mode')[0]),
					'description': Markup('The I/O mode for the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.mode',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('name')[0]),
					'description': Markup('If the file object was created using open(), the name of the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.name',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('newlines')[0]),
					'description': Markup('If Python was built with the --with-universal-newlines option to configure (the default) this read-only attribute exists, and for files opened in universal newline read mode it keeps track of the types of newlines encountered while reading the file'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.newlines',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('softspace')[0]),
					'description': Markup('Boolean that indicates whether a space character needs to be printed before another value when using the print statement'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#file.softspace',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('List Methods'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('append(x)')[0]),
					'description': Markup('Append a new item with value x to the end of the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.append',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('buffer_info()')[0]),
					'description': Markup('Return a tuple (address, length) giving the current memory address and the length in elements of the buffer used to hold array‚Äôs contents'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.buffer_info',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('byteswap()')[0]),
					'description': Markup('‚ÄúByteswap‚Äù all items of the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.byteswap',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('count(x)')[0]),
					'description': Markup('Return the number of occurrences of x in the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.count',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('extend(iterable)')[0]),
					'description': Markup('Append items from iterable to the end of the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.extend',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fromfile(f,n)')[0]),
					'description': Markup('Read n items (as machine values) from the file object f and append them to the end of the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.fromfile',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fromlist(list)')[0]),
					'description': Markup('Append items from the list'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.fromlist',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fromstring(s)')[0]),
					'description': Markup('Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the fromfile() method)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.fromstring',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fromunicode(s)')[0]),
					'description': Markup('Extends this array with data from the given unicode string'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.fromunicode',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('index(x)')[0]),
					'description': Markup('Return the smallest i such that i is the index of the first occurrence of x in the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.index',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('insert(i,x)')[0]),
					'description': Markup('Insert a new item with value x in the array before position i'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.insert',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('pop([i])')[0]),
					'description': Markup('Removes the item with the index i from the array and returns it'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.pop',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('remove(x)')[0]),
					'description': Markup('Remove the first occurrence of x from the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.remove',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('reverse()')[0]),
					'description': Markup('Reverse the order of the items in the array'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.reverse',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tofile(f)')[0]),
					'description': Markup('Write all items (as machine values) to the file object f'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.tofile',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tolist()')[0]),
					'description': Markup('Convert the array to an ordinary list with the same items'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.tolist',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tostring()')[0]),
					'description': Markup('Convert the array to an array of machine values and return the string representation (the same sequence of bytes that would be written to a file by the tofile() method.)'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.tostring',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tounicode()')[0]),
					'description': Markup('Convert the array to a unicode string'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/array.html#array.array.tounicode',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('Sets'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('isdisjoint(other)')[0]),
					'description': Markup('Return True if the set has no elements in common with other'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.isdisjoint',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('issubset(others)')[0]),
					'description': Markup('Test whether every element in the set is in others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.issubset',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('issuperset')[0]),
					'description': Markup('Test whether every element in other is in the set'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.issuperset',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('union(other...)')[0]),
					'description': Markup('Return a new set with elements from the set and all others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.union',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('intersection(other, ...)')[0]),
					'description': Markup('Return a new set with elements common to the set and all others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.intersection',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('difference(other...)')[0]),
					'description': Markup('Return a new set with elements in the set that are not in the others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.difference',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('symmetric_difference(other)')[0]),
					'description': Markup('Return a new set with elements in either the set or other but not both'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.symmetric_difference',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('copy()')[0]),
					'description': Markup('Return a new set with a shallow copy of s'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.copy',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('update()')[0]),
					'description': Markup('Update the set, adding elements from all others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.update',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('intersection_update()')[0]),
					'description': Markup('Update the set, adding elements from all others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.intersection_update',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('difference_update()')[0]),
					'description': Markup('Update the set, removing elements found in others'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.difference_update',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('symmetric_difference_update()')[0]),
					'description': Markup('Update the set, keeping only elements found in either set, but not in both'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.symmetric_difference_update',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('add(elem)')[0]),
					'description': Markup('Add element elem to the set'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.add',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('remove()')[0]),
					'description': Markup('Remove element elem from the set. Raises KeyError if elem is not contained in the set'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.remove',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('discard(elem)')[0]),
					'description': Markup('Remove element elem from the set if it is present'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.discard',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('pop()')[0]),
					'description': Markup('Remove element elem from the set if it is present'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.pop',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('clear()')[0]),
					'description': Markup('Remove all elements from the set'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#set.clear',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('Dictionary Methods'),
		'subtitle': '',
		'description': '.',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [

				{
					'flag': Markup(helper.set_entry_folder('clear()')[0]),
					'description': Markup('Remove all items from the dictionary'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.clear',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('copy()')[0]),
					'description': Markup('Return a shallow copy of the dictionary'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.copy',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fromkeys(seq[, value])')[0]),
					'description': Markup('Create a new dictionary with keys from seq and values set to value'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.fromkeys',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('get(key[, default])')[0]),
					'description': Markup('Return the value for key if key is in the dictionary, else default'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.get',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('has_key(key)')[0]),
					'description': Markup('Test for the presence of key in the dictionary. has_key() is deprecated in favor of key in d'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.has_key',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('items()')[0]),
					'description': Markup('Return a copy of the dictionary‚Äôs list of (key, value) pairs'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.items',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('iteritems()')[0]),
					'description': Markup('Return an iterator over the dictionary‚Äôs (key, value) pairs. See the note for dict.items()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.iteritems',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('iterkeys()')[0]),
					'description': Markup('Return an iterator over the dictionary‚Äôs keys. See the note for dict.items()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.iterkeys',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('itervalues()')[0]),
					'description': Markup('Return an iterator over the dictionary‚Äôs values. See the note for dict.items()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.itervalues',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('keys()')[0]),
					'description': Markup('Return a copy of the dictionary‚Äôs list of keys. See the note for dict.items()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.keys',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('pop(key[, default])')[0]),
					'description': Markup('If key is in the dictionary, remove it and return its value, else return default'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.pop',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('popitem()')[0]),
					'description': Markup('Remove and return an arbitrary (key, value) pair from the dictionary'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.popitem',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('setdefault(key[, default])')[0]),
					'description': Markup('If key is in the dictionary, return its value. If not, insert key with a value of default and return default'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.setdefault',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('update([other])')[0]),
					'description': Markup('Update the dictionary with the key/value pairs from other, overwriting existing keys. Return None'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.update',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('values')[0]),
					'description': Markup('Return a copy of the dictionary‚Äôs list of values. See the note for dict.items()'),
					'example': helper.example_path(),
					'ext_link': 'http://docs.python.org/library/stdtypes.html#dict.values',
					'video': Markup(''),
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
]
# {
#     'heading': helper.set_folder(''),
#     'subtitle': '',
#     'description': '.',
#     'columns': 'col-lg-6 col-md-12',
#     'uuid': helper.get_uuid(),
# 'static_ref': '',
#     'content': {
#         'descriptor': [
#             'Command',
#             'Description'
#         ],
#         'data': [
#
#         ]
#     }
# },
resources = [
	ResourceCollector.recieve_resources_from_dicts(
		{
			'link': 'https://www.python.org/',
			'title': 'Python Official Website',
			'description': Markup('The official website for Python - the best documentation out there'),
			'footer': Markup(''),
			'screencapture': ''
		},
	)
]
affiliate_products = [],
licensing = [
	Markup('')
]
