import os
import pathlib
from datetime import datetime

from markupsafe import Markup

from static.data_dict.helper_functions import Helpers
from static.data_dict.resource_collector import ResourceCollector

helper = Helpers('vim', pathlib.Path(__file__))
iterrator = iter(helper)
cheatsheet_name = 'vim'
information = {
	'tool': 'Vim',
	'title': 'Vim Cheatsheet',
	'subtitle': 'This site is a reference for the text editor Vim',
	'description': 'Vim is a contaction of Vi IMproved and is a clone of the text-editor Vi but with additions. It is a highly configurable text-editor with an initial released version seeing the world in 1991. It is mainly designed as a command-line application but also comes in a GUI version.',
	'last_modified': (datetime.utcfromtimestamp(os.path.getmtime(__file__)).strftime('%d %B, %Y at %H:%M:%S')),
	'state': 'âœ”',
	'characteristics': [
		ResourceCollector.recieve_characteristics_from_dicts(
			'Vim', [
				helper.characteristics.get('text-editor'),
			])
	],
	'topic_uris': [
		'text-editor',
	],
}
general_info_text = ''
general_info_text_lead = ''
general_info_links = {}
general_info = [
	Markup('Commands written with brackets has two options for invocation, e.g <kbd>:h[elp]</kbd> can be invoked with either <kbd>:h</kbd> or <kbd>:help</kbd>'),
]
general_info_flag = True
see_also = [
	{
	},
]

cheatsheet = [
	{
		'heading': helper.set_folder('Global'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'info': {
			"You can run the command vimtutor in a terminal to learn the first Vim commands.",
		},
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':h[elp] keyword')[0]),
					'description': Markup('Open help for keyword'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':sav[eas] file')[0]),
					'description': Markup('Save file as'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':clo[se]')[0]),
					'description': Markup('Close current pane'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':ter[minal]')[0]),
					'description': Markup('Open a terminal window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('K')[0]),
					'description': Markup('Open man page for word under the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Cursor Movement'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'info': {
			'Prefix a cursor movement command with a number to repeat it. For example, 4j moves down 4 lines.'
		},
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('h')[0]),
					'description': Markup('Move cursor left'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('j')[0]),
					'description': Markup('Move cursor down'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('k')[0]),
					'description': Markup('Move cursor up'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('l')[0]),
					'description': Markup('Nove cursor right'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('H')[0]),
					'description': Markup('Move to top of screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('M')[0]),
					'description': Markup('Move to middle of screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('L')[0]),
					'description': Markup('Move to bottom of screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('w')[0]),
					'description': Markup('Jump forwards to the start of a word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('W')[0]),
					'description': Markup('Jump forwards to the start of a word (words can contain punctuation)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('e')[0]),
					'description': Markup('Jump forwards to the end of a word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('E')[0]),
					'description': Markup('Jump forwards to the end of a word (words can contain punctuation)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('b')[0]),
					'description': Markup('Jump backwards to the start of a word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('B')[0]),
					'description': Markup('Jump backwards to the start of a word (words can contain punctuation)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('%')[0]),
					'description': Markup('Move to matching character (default supported pairs: \'()\', \'{}\', \'[]\' - use :h matchpairs in vim for more info)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('0')[0]),
					'description': Markup('Jump to the start of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('^')[0]),
					'description': Markup('Jump to the first non-blank character of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('$')[0]),
					'description': Markup('Jump to the end of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('g_')[0]),
					'description': Markup('Jump to the last non-blank character of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gg')[0]),
					'description': Markup('Go to the first line of the document'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('G')[0]),
					'description': Markup('Go to the last line of the document'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('5gg</kbd> or <kbd>5G')[0]),
					'description': Markup('Go to line 5'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('fx')[0]),
					'description': Markup('Jump to next occurrence of character x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('tx')[0]),
					'description': Markup('Jump to before next occurrence of character x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Fx')[0]),
					'description': Markup('Jump to previous occurence of character x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Tx')[0]),
					'description': Markup('Jump to after previous occurence of character x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(';')[0]),
					'description': Markup('Repeat previous f, t, F or T movement'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(',')[0]),
					'description': Markup('Repeat previous f, t, F or T movement, backwards'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('}')[0]),
					'description': Markup('Jump to next paragraph (or function/block, when editing code)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('{')[0]),
					'description': Markup('Jump to previous paragraph (or function/block, when editing code)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zz')[0]),
					'description': Markup('Center cursor on screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + e')[0]),
					'description': Markup('Move screen down one line (without moving cursor)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + y')[0]),
					'description': Markup('Move screen up one line (without moving cursor)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + b')[0]),
					'description': Markup('Move back one full screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + f')[0]),
					'description': Markup('Move forward one full screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + d')[0]),
					'description': Markup('Move forward 1/2 a screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + u')[0]),
					'description': Markup('Move back 1/2 a screen'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Insert mode'),
		'subtitle': 'Inserting/Appending Text',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('i')[0]),
					'description': Markup('Insert before the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('I')[0]),
					'description': Markup('Insert at the beginning of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('a')[0]),
					'description': Markup('Insert (append) after the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('A')[0]),
					'description': Markup('Insert (append) at the end of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('o')[0]),
					'description': Markup('Append (open) a new line below the current line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('O')[0]),
					'description': Markup('Append (open) a new line above the current line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ea')[0]),
					'description': Markup('Insert (append) at the end of the word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + h')[0]),
					'description': Markup('Delete the character before the cursor during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + w')[0]),
					'description': Markup('Delete word before the cursor during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + j')[0]),
					'description': Markup('Begin new line during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + t')[0]),
					'description': Markup('Indent (move right) line one shiftwidth during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + d')[0]),
					'description': Markup('De-indent (move left) line one shiftwidth during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + n')[0]),
					'description': Markup('Insert (auto-complete) next match before the cursor during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + p')[0]),
					'description': Markup('Insert (auto-complete) previous match before the cursor during insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + rx')[0]),
					'description': Markup('Insert the contents of register x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Esc')[0]),
					'description': Markup('Exit insert mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Editing'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('r')[0]),
					'description': Markup('Replace a single character'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('J')[0]),
					'description': Markup('JJoin line below to the current one with one space in between'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gJ')[0]),
					'description': Markup('Join line below to the current one without space in between'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gwip')[0]),
					'description': Markup('Reflow paragraph'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('g~')[0]),
					'description': Markup('Switch case up to motion'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gu')[0]),
					'description': Markup('Change to lowercase up to motion'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gU')[0]),
					'description': Markup('Change to uppercase up to motion'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('cc')[0]),
					'description': Markup('Change (replace) entire line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('C')[0]),
					'description': Markup('Change (replace) to the end of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('c$')[0]),
					'description': Markup('Change (replace) to the end of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ciw')[0]),
					'description': Markup('Change (replace) entire word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('cw')[0]),
					'description': Markup('Change (replace) to the end of the word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('s')[0]),
					'description': Markup('Delete character and substitute text'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('S')[0]),
					'description': Markup('Delete line and substitute text (same as cc)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('xp')[0]),
					'description': Markup('Transpose two letters (delete and paste)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('u')[0]),
					'description': Markup('Undo'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('U')[0]),
					'description': Markup('Restore (undo) last changed line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + r')[0]),
					'description': Markup('Redo'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('.')[0]),
					'description': Markup('Repeat last command'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Visual Mode'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'info': {
			'When selecting a block with ab or aB, alternatively you can use ( or {'
		},
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('v')[0]),
					'description': Markup('Start visual mode, mark lines, then do a command (like y-yank)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('V')[0]),
					'description': Markup('Start linewise visual mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('o')[0]),
					'description': Markup('Move to other end of marked area'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + v')[0]),
					'description': Markup('Start visual block mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('O')[0]),
					'description': Markup('Move to other corner of block'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('aw')[0]),
					'description': Markup('Mark a word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ab')[0]),
					'description': Markup('A block with ()'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('aB')[0]),
					'description': Markup('A block with {}'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('at')[0]),
					'description': Markup('A block with <> tags'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ib')[0]),
					'description': Markup('Inner block with ()'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('iB')[0]),
					'description': Markup('Inner block with {}'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('it')[0]),
					'description': Markup('Inner block with <> tags'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Esc')[0]),
					'description': Markup('Exit visual mode'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Visual Commands'),
		'subtitle': 'Commands applicable in Visual Mode',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('>')[0]),
					'description': Markup('Shift text right'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('<')[0]),
					'description': Markup('Shift text left'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('y')[0]),
					'description': Markup('Yank (copy) marked text'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('d')[0]),
					'description': Markup('Delete marked text'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('~')[0]),
					'description': Markup('Switch case'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('u')[0]),
					'description': Markup('Change marked text to lowercase'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('U')[0]),
					'description': Markup('Change marked text to uppercase'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},

			]
		}
	},
	{
		'heading': helper.set_folder('Registers'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'info': {
			'Registers are being stored in ~/.viminfo, and will be loaded again on next restart of vim.',
		},
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':reg[isters]')[0]),
					'description': Markup('Show registers content'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('"xy')[0]),
					'description': Markup('Yank into register x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('"xp')[0]),
					'description': Markup('Paste contents of register x'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('"+y')[0]),
					'description': Markup('Yank into the system clipboard register'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('"+p')[0]),
					'description': Markup('Paste from the system clipboard register'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Special Registers'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('0')[0]),
					'description': Markup('Last yank'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('"')[0]),
					'description': Markup('Unnamed register, last delete or yank'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('%')[0]),
					'description': Markup('Current file name'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('#')[0]),
					'description': Markup('Alternate file name'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('*')[0]),
					'description': Markup('Clipboard contents (X11 primary)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('+')[0]),
					'description': Markup('Clipboard contents (X11 clipboard)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('/')[0]),
					'description': Markup('Last search pattern'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':')[0]),
					'description': Markup('Last command-line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('.')[0]),
					'description': Markup('Last inserted text'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('-')[0]),
					'description': Markup('Last small (less than a line) delete'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('=')[0]),
					'description': Markup('Expression register'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('_')[0]),
					'description': Markup('Black hole register'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Marks and Positions'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'': {
			'To jump to a mark you can either use a backtick (`) or an apostrophe (\'). Using an apostrophe jumps to the beginning (first non-black) of the line holding the mark.',
		},
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':marks')[0]),
					'description': Markup('List of marks'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('ma')[0]),
					'description': Markup('Set current position for mark A'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('`a')[0]),
					'description': Markup('Jump to position of mark A'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('y`a')[0]),
					'description': Markup('Yank text to position of mark A'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('`0')[0]),
					'description': Markup('Go to the position where Vim was previously exited'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('`"')[0]),
					'description': Markup('Go to the position when last editing this file'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('`.')[0]),
					'description': Markup('Go to the position of the last change in this file'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('``')[0]),
					'description': Markup('Go to the position before the last jump'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':ju[mps]')[0]),
					'description': Markup('List of jumps'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + i')[0]),
					'description': Markup('Go to newer position in jump list'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + o')[0]),
					'description': Markup('Go to older position in jump list'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':changes')[0]),
					'description': Markup('List of changes'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('g,')[0]),
					'description': Markup('Go to newer position in change list'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('g;')[0]),
					'description': Markup('Go to older position in change list'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + ]')[0]),
					'description': Markup('Jump to the tag under cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Macros'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('qa')[0]),
					'description': Markup('Record macro a'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('q')[0]),
					'description': Markup('Stop recording macro'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('@a')[0]),
					'description': Markup('Run macro a'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('@@')[0]),
					'description': Markup('Rerun last run macro'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Cut and paste'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('yy')[0]),
					'description': Markup('Yank (copy) a line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('2yy')[0]),
					'description': Markup('Yank (copy) 2 lines'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('yw')[0]),
					'description': Markup('Yank (copy) the characters of the word from the cursor position to the start of the next word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('y$')[0]),
					'description': Markup('Yank (copy) to end of line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('p')[0]),
					'description': Markup('Put (paste) the clipboard after cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('P')[0]),
					'description': Markup('Put (paste) before cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('dd')[0]),
					'description': Markup('Delete (cut) a line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('2dd')[0]),
					'description': Markup('Delete (cut) 2 lines'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('dw')[0]),
					'description': Markup('Delete (cut) the characters of the word from the cursor position to the start of the next word'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('D')[0]),
					'description': Markup('Delete (cut) to the end of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('d$')[0]),
					'description': Markup('Delete (cut) to the end of the line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('x')[0]),
					'description': Markup('Delete (cut) character'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Indent text'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('>>')[0]),
					'description': Markup('Indent (move right) line one shiftwidth'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('<<')[0]),
					'description': Markup('De-indent (move left) line one shiftwidth'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('>%')[0]),
					'description': Markup('Indent a block with () or {} (cursor on brace)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('>ib')[0]),
					'description': Markup('Indent inner block with ()'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('>at')[0]),
					'description': Markup('Indent a block with <> tags'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('3==')[0]),
					'description': Markup('Re-indent 3 lines'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('=%')[0]),
					'description': Markup('Re-indent a block with () or {} (cursor on brace)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('=iB')[0]),
					'description': Markup('Re-indent inner block with {}'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gg=G')[0]),
					'description': Markup('Re-indent entire buffer'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(']p')[0]),
					'description': Markup('Paste and adjust indent to current line'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Exiting'),
		'subtitle': 'How to Exit Vim',
		'description': 'This section describes how to exit Vim',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':w')[0]),
					'description': Markup('Write (save) the file, but don\'t exit'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':w !sudo tee %')[0]),
					'description': Markup('Write out the current file using sudo'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':wq</kbd> or <kbd>:x</kbd> or <kbd>ZZ')[0]),
					'description': Markup('Write (save) and quit'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':q')[0]),
					'description': Markup('Quit (fails if there are unsaved changes)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':q!</kbd> or <kbd>ZQ')[0]),
					'description': Markup('Quit and throw away unsaved changes'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':wqa')[0]),
					'description': Markup('Write (save) and quit on all tabs'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Search and Replace'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('/pattern')[0]),
					'description': Markup('Search for pattern'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('?pattern')[0]),
					'description': Markup('Search backward for pattern'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('\\vpattern')[0]),
					'description': Markup('\'Very magic\' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('n')[0]),
					'description': Markup('Repeat search in same direction'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('N')[0]),
					'description': Markup('Repeat search in opposite direction'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':%s/old/new/g')[0]),
					'description': Markup('Replace all old with new throughout file'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':%s/old/new/gc')[0]),
					'description': Markup('Replace all old with new throughout file with confirmations'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':noh[lsearch]')[0]),
					'description': Markup('Remove highlighting of search matches'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Search in Multiple Files'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':vim[grep] /pattern/ {`{file}`}')[0]),
					'description': Markup('Search for pattern in multiple files'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':cn[ext]')[0]),
					'description': Markup('Jump to the next match'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':cp[revious]')[0]),
					'description': Markup('Jump to the previous match'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':cope[n]')[0]),
					'description': Markup('Open a window containing the list of matches'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':ccl[ose]')[0]),
					'description': Markup('Close the quickfix window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Tabs'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':tabnew</kbd> or <kbd>:tabnew&nbsp;{page.words.file}')[0]),
					'description': Markup('Open a file in a new tab'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wT')[0]),
					'description': Markup('Move the current split window into its own tab'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gt</kbd> or <kbd>:tabn[ext]')[0]),
					'description': Markup('Move to the next tab'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('gT</kbd> or <kbd>:tabp[revious]')[0]),
					'description': Markup('Move to the previous tab'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('#gt')[0]),
					'description': Markup('Move to tab number #'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':tabm[ove] #')[0]),
					'description': Markup('Move current tab to the #th position (indexed from 0)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':tabc[lose]')[0]),
					'description': Markup('Close the current tab and all its windows'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':tabo[nly]')[0]),
					'description': Markup('Close all tabs except for the current one'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':tabdo')[0]),
					'description': Markup('Command - run the command on all tabs (e.g. :tabdo q - closes all opened tabs)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Working with multiple files'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder(':e[dit] file')[0]),
					'description': Markup('Edit a file in a new buffer'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':bn[ext]')[0]),
					'description': Markup('Go to the next buffer'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':bp[revious]')[0]),
					'description': Markup('Go to the previous buffer'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':bd[elete]')[0]),
					'description': Markup('Delete a buffer (close a file)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':b[uffer]#')[0]),
					'description': Markup('Go to a buffer by index #'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':b[uffer] file')[0]),
					'description': Markup('Go to a buffer by file'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':ls or :buffers')[0]),
					'description': Markup('List all open buffers'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':sp[lit] file')[0]),
					'description': Markup('Open a file in a new buffer and split window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':vs[plit] file')[0]),
					'description': Markup('Open a file in a new buffer and vertically split window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':vert[ical] ba[ll]')[0]),
					'description': Markup('Edit all buffers as vertical windows'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':tab ba[ll]')[0]),
					'description': Markup('Edit all buffers as tabs'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + ws')[0]),
					'description': Markup('Split window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wv')[0]),
					'description': Markup('Split window vertically'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + ww')[0]),
					'description': Markup('Switch windows'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wq')[0]),
					'description': Markup('Quit a window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wx')[0]),
					'description': Markup('Exchange current window with next one'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + w=')[0]),
					'description': Markup('Make all windows equal height & width'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wh')[0]),
					'description': Markup('Move cursor to the left window (vertical split)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wl')[0]),
					'description': Markup('Move cursor to the right window (vertical split)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wj')[0]),
					'description': Markup('Move cursor to the window below (horizontal split)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('Ctrl + wk')[0]),
					'description': Markup('Move cursor to the window above (horizontal split)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},
	{
		'heading': helper.set_folder('Diff'),
		'subtitle': '',
		'description': '',
		'columns': 'col-lg-6 col-md-12',
		'uuid': helper.get_uuid(),
		'static_ref': '',
		'info': {
			'The commands for folding (e.g. za) operate on one level. To operate on all levels, use uppercase letters (e.g. zA).',
			'To view the differences of files, one can directly start Vim in diff mode by running vimdiff in a terminal. One can even set this as git difftool.',
		},
		'content': {
			'descriptor': [
				'Command',
				'Description'
			],
			'data': [
				{
					'flag': Markup(helper.set_entry_folder('zf')[0]),
					'description': Markup('Manually define a fold up to motion'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zd')[0]),
					'description': Markup('Delete fold under the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('za')[0]),
					'description': Markup('Toggle fold under the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zo')[0]),
					'description': Markup('Open fold under the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zc')[0]),
					'description': Markup('Close fold under the cursor'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zr')[0]),
					'description': Markup('Reduce (open) all folds by one level'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zm')[0]),
					'description': Markup('Fold more (close) all folds by one level'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('zi')[0]),
					'description': Markup('Toggle folding functionality'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(']c')[0]),
					'description': Markup('Jump to start of next change'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('[c')[0]),
					'description': Markup('Jump to start of previous change'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('do or :diffg[et]')[0]),
					'description': Markup('Obtain (get) difference (from other buffer)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder('dp or :diffpu[t]')[0]),
					'description': Markup('Put difference (to other buffer)'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':diffthis')[0]),
					'description': Markup('Make current window part of diff'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':dif[fupdate]')[0]),
					'description': Markup('Update differences'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
				{
					'flag': Markup(helper.set_entry_folder(':diffo[ff]')[0]),
					'description': Markup('Switch off diff mode for current window'),
					'video': Markup(''),
					'example': helper.example_path(),
					'ext_link': '',
					'uuid': helper.get_uuid(),
					'static_ref': '',
				},
			]
		}
	},

]
resources = [
	ResourceCollector.recieve_resources_from_dicts(
		{
			'link': 'https://github.com/hakluke/how-to-exit-vim',
			'title': 'How to Exit Vim',
			'description': Markup('The most complex ways of exiting Vim.. and some of the simplest; but that is no fun!'),
			'footer': 'Be warned: some of these methods may destroy your system.',
			'screencapture': ''
		},
		{
			'link': 'https://sanctum.geek.nz/arabesque/vim-koans/',
			'title': 'Vim Koans',
			'description': Markup('Carved into stone tabulas at a time when day was dark and matter was void; this wisdom will surely bring enlightenment upon humanity'),
			'screencapture': 'resources/graphic/link_screen_captures/sanctum_geek_nz.png',
		},
	)
]
affiliate_products = [
	ResourceCollector.recieve_resources_from_dicts(
		{
			'title': Markup('Vim cheatsheet stickers!'),
			'affiliate_link': Markup(
				'<a target="_blank"  href="https://www.amazon.com/gp/product/B00359YK5E/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00359YK5E&linkCode=as2&tag=cheatsheet0e-20&linkId=fa5b9f2e3651cdc9b22cb69b04b50ca8"><img style="max-height:150px; max-width: 150px;"  border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=B00359YK5E&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=cheatsheet0e-20" ></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=cheatsheet0e-20&l=am2&o=1&a=B00359YK5E" width="100px" border="0" alt="" style="border:none !important; margin:0px !important;" />'),
			'footer': Markup('Stickers to put on your keyboard! Great tool for learning Vim'),
			'description': '',
		},
		{
			'title': Markup('Practical Vim'),
			'affiliate_link': Markup(
				'<a target="_blank"  href="https://www.amazon.com/gp/product/1680501275/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1680501275&linkCode=as2&tag=cheatsheet0e-20&linkId=60e2174b375aae9b613f4f5b9d4f5050"><img style="max-height:150px; max-width: 150px;" border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=1680501275&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=cheatsheet0e-20" ></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=cheatsheet0e-20&l=am2&o=1&a=1680501275" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />'),
			'footer': Markup(''),
			'description': '',
		}
	)
]
licensing = [
	Markup('This Vim cheatsheet is MIT licensed. <a href="https://github.com/rtorr/vim-cheat-sheet">See original work here.</a>')
]
